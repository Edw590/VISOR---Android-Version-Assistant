plugins {
	id 'com.android.application'
}

android {
	namespace 'com.edw590.visor_c_a'

	signingConfigs {
		signingConfig {
			final def propsFile = rootProject.file('PERSONAL_FILES_EOG\\signing_visor_c_a.SECRET')
			final def props = new Properties()

			props.load(new FileInputStream(propsFile))
			storeFile = file(props["storeFilePath"])
			storePassword = props["storePassword"]
			keyAlias = props["keyAlias"]
			keyPassword = props["keyPassword"]
		}
	}

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/*

	The minimum version will be kept on API 15 in case there's some emergency and it's needed to use on an old phone and
	that way at least the minimum can be used, hopefully.

	The target version will be kept at 23, since that may unlock security limitations imposed if the target SDK is newer,
	like as of API 28, some internal/hidden classes and methods can no longer be used.
	Change it to a newer one to test with Play Store standards only.
	Do NOT put it below API 23, or the app will not be able to check/request run-time permissions!

	Versions for which the app was developed (developing to a version implies testing on that version):
		- KitKat 4.4.2, API 19 (tablet) [secondary] --> until [still on it]
		- Lollipop 5.1, API 22 (phone) [rarer] --> until [still on it]
		- Oreo 8.1, API 27 (phone) [main] --> until [still on it]

	THIS ALSO MEANS THE APP'S FEATURES ARE ---ONLY--- BEING MADE FOR THE LATEST OF THE ANDROID VERSIONS ABOVE!!!!!
	The app is only being made to work on the above versions, not caring of newer versions. It may include code for
	newer versions, but it's optional - it only has to work on the above versions.
	The app is also always being compiled with the newest hidden/internal SDKs available, so it won't let pass errors
	of non-existent APIs for example, but again, optional - could be compiled with the SDK for the newest version above.

	--> todo THIS MEANS... to update the app to a newer device, ALL code should be checked. AND read the release notes
	     from the new version to know ALL that changed.

	*/
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	// ----- WARNING -----
	// When you change the compileSdkVersion, ALWAYS increment it!!! Don't jump one or more versions!!!
	// This way, because of being using hidden/internal APIs that can be changed and no backwards compatibility given,
	// Android Studio will warn if a change happened in the hidden/internal SDK (something deleted or changed, like
	// method signature), and then you can take care of it immediately: reflection to the old way, direct SDK usage for
	// the new way, so that Android Studio warns of changes (it won't if reflection is always used - but if will if
	// direct usage is used). I've done this already since API 15, so all is guaranteed to work.
	// When writing new code, go to AOSP code and check on previous versions if the constants and functions used exist
	// on them all, and if not, act about it to make it work.
	// Example of why not jump between versions when updating compileSdkVersion: on KitKat there's a FLAG_PRIVILEGED
	// constant somewhere (and is a hidden constant). In Lollipop that was changed. In Marshmallow, it was changed again
	// and the Lollipop constant disappeared - if you jump from KitKat to Marshmallow, Android Studio won't warn about
	// the Marshmallow constant not being compatible with Lollipop. So always increment.

	// Aside from the above, BEFORE INCREMENTING, READ ALL THAT CHANGED BETWEEN THE 2 VERSIONS!!!!
	// An example on Android 12 is start foreground services from background seems to be forbidden - restart the service
	// every time the app is killed or crashes?.
	// Read here: https://developer.android.com/about/versions

	defaultConfig {
		applicationId "com.edw590.visor_c_a"
		compileSdk 33
		minSdkVersion 16
		//noinspection ExpiredTargetSdkVersion
		targetSdkVersion 23
		versionCode 1
		versionName "for development"

		multiDexEnabled true // Enable only if really necessary - slower builds, sometimes:
		// https://developer.android.com/studio/build/multidex#dev-build
		signingConfig signingConfigs.signingConfig
	}

	buildTypes {
		debug {
			minifyEnabled false
			shrinkResources false
			proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
			signingConfig signingConfigs.signingConfig
		}
		release {
			minifyEnabled true
			shrinkResources true
			proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
			signingConfig signingConfigs.signingConfig
		}
	}


	packagingOptions {
		jniLibs {
			useLegacyPackaging = false
		}
		dex {
			useLegacyPackaging = false
		}
		resources.excludes.add("META-INF/*")
	}
	sourceSets {
		main {
			assets.srcDirs = ['src/main/assets']
		}
	}
	lint {
		abortOnError true
		checkAllWarnings true
		checkDependencies true
		checkGeneratedSources true
		checkReleaseBuilds true
		explainIssues true
	}
}

dependencies {
	/////////////////////
	// Maven //

	// Android
	// appcompat can be up to 1.6.1 for mindSdkVersion of <21 and only if compileSdk is >=33.
	implementation "androidx.appcompat:appcompat:1.4.2"
	implementation "androidx.constraintlayout:constraintlayout:2.1.4"
	implementation "androidx.multidex:multidex:2.0.1"
	implementation "androidx.preference:preference:1.2.0"
	implementation "androidx.navigation:navigation-fragment:2.5.3"
	implementation "androidx.navigation:navigation-ui:2.5.3"
	// These 2 below can be higher too if the compileSdk was higher too.
	implementation "androidx.viewpager2:viewpager2:1.0.0"
	implementation "com.google.android.material:material:1.6.0"

	// External
	implementation "org.gavaghan:geodesy:1.1.3"
	implementation "com.madgag.spongycastle:core:1.58.0.0"
	implementation "com.ms-square:expandableTextView:0.1.4"
	// Don't update the Commons IO library! Use 2.7+ for Android 8 on minSdkVersion. Or 2.6 for some Android in-between.
	// https://commons.apache.org/proper/commons-io/
	implementation "commons-io:commons-io:2.5"
	//implementation "com.pierfrancescosoffritti.androidyoutubeplayer:core:12.1.1"


	/////////////////////
	// Local files //

	// VISOR's Main Libraries
	implementation files("libs/MainLibraries.aar")

	// External
	implementation files("libs/jutf7-1.0.0.jar")
	implementation files("libs/pocketsphinx-android-5prealpha-release.aar")
	implementation files("libs/opencv-3.4.16.aar")
}

ant.importBuild 'assets.xml'
preBuild.dependsOn(list, checksum)
clean.dependsOn(clean_assets)
